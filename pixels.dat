void read_pixel_data(const std::string &filename, std::vector<Pixel> &pixel_list)
{
	std::ifstream infile(fileme);
	if(!infile)
	{
		std::cerr << "Error: File could not be opened!" << std::endl;
		return;
	}

	std::string line;
	while(std::getline(infile, line))
	{
		std::stringstream ss(line);
		std::string token;
		Pixel pixel;

		std::getline(ss, token, ',');
		pixel.x = std::stoi(token);

		std::getline(ss, token, ',');
		pixel.y = std::stoi(token);

		std::getline(ss, token, ',');
		pixel.r = std::stof(token);
		
		std::getline(ss, token, ',');
		pixel.g = std::stof(token);

		std::getline(ss, token, ',');
		pixel.b = std::stof(token);

		pixel_list.push_back(pixel);
	}
	
	infile.close();
}

void average_colors(const std::vector<Pixel> &pixel_list)
{
	float total_r = 0, total_g = 0, total_b = 0;
	int pixel_count = pixel_list.size();

	for(const auto &pixel : pixel_list)
	{
		total_r += pixel.r;
		total_g += pixel.g;
		total_b += pixel.b;
	}
	
	std::cout << "Average R: " << total_r / pixel_count << std::endl;
	std::cout << "Average G: " << total_g / pixel_count << std::endl;
	std::cout << "Average B: " << total_b / pixel_count << std::endl;
}

void flip_vertically(std::vector<Pixel> &pixel_list)
{
	int max_y = 255;
	for(auto &pixel : pixel_list)
	{
		pixel.y = max_y - pixel.y;
	}
}

void save_flipped_data(const std::string &filename, const std::vector<Pixel> &pixel_list)
{
	std::ofstream outfile(filename;
	if(!outfile)
	{
		std::cerr << "Error: Could not open the file for writing!" <<std::endl;
		return;
	}

	for(const auto &pixel : pixel_list)
	{
		outfile << pixel.x << ',' << pixel.y << ','
			<< pixel.r << ',' << pixel.g << ',' << pixel.b << '\n';
	}

	outfile.close();
}









